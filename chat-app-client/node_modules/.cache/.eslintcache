[{"/home/meet/projects/chat-app/chat-app-client/src/index.js":"1","/home/meet/projects/chat-app/chat-app-client/src/App.js":"2"},{"size":232,"mtime":1684898336434,"results":"3","hashOfConfig":"4"},{"size":9426,"mtime":1684931513372,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"9"},"disn6a",{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},"/home/meet/projects/chat-app/chat-app-client/src/index.js",[],[],[],"/home/meet/projects/chat-app/chat-app-client/src/App.js",["14","15","16"],[],"import React, { useEffect, useState, useRef } from 'react';\nimport io from 'socket.io-client';\nimport './App.css';\nimport Linkify from 'react-linkify';\nimport ReactLinkPreview from 'react-link-preview';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faImage } from '@fortawesome/free-solid-svg-icons';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUpload } from '@fortawesome/free-solid-svg-icons';\n\nconst socket = io('http://localhost:3002');\n\nfunction App() {\n  const [username, setUsername] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [activeUsers, setActiveUsers] = useState([]);\n  const [userHistory, setUserHistory] = useState([]);\n  const messageListRef = useRef(null);\n  const [chatStarted, setChatStarted] = useState(false);\n  const [loadingMessages, setLoadingMessages] = useState(false);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [modalImage, setModalImage] = useState(null);\n  const [selectingImage, setSelectingImage] = useState(false); // Add this line\n\n  const handleStartChat = () => {\n    if (username) {\n      setChatStarted(true);\n      socket.connect();\n      socket.emit('join', username);\n    }\n  };\n\n  useEffect(() => {\n    if (chatStarted) {\n      socket.on('connect', () => {\n        console.log('Connected to server');\n      });\n\n      socket.on('chat message', (message) => {\n        setMessages((prevMessages) => [...prevMessages, message]);\n        scrollToBottom();\n      });\n\n      socket.on('active users', (users) => {\n        setActiveUsers(users);\n      });\n\n      socket.on('user history', (history) => {\n        setUserHistory(history);\n      });\n\n      socket.on('disconnect', () => {\n        console.log('Disconnected from server');\n        setActiveUsers([]);\n      });\n\n      return () => {\n        socket.disconnect();\n      };\n    }\n  }, [chatStarted]);\n\n  useEffect(() => {\n    const fetchMessages = async () => {\n      setLoadingMessages(true);\n      try {\n        const response = await fetch('http://localhost:3002/messages');\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        const limitedMessages = data.slice(-50); // Limiting messages to the last 50\n        setMessages(limitedMessages);\n        scrollToBottom();\n      } catch (error) {\n        console.error('Fetching messages failed: ', error);\n      } finally {\n        setLoadingMessages(false);\n      }\n    };\n\n    if (chatStarted) {\n      fetchMessages();\n    }\n  }, [chatStarted]);\n\n  const scrollToBottom = () => {\n    if (messageListRef.current) {\n      messageListRef.current.scrollTop = messageListRef.current.scrollHeight;\n    }\n  };\n\n  const handleSendMessage = () => {\n    if (inputMessage) {\n      const message = {\n        username,\n        message: inputMessage,\n        image: selectedImage,\n      };\n\n      socket.emit('chat message', message);\n      setInputMessage('');\n      setSelectedImage(null);\n    }\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n      scrollToBottom();\n    }\n  };\n\n  const handleMessage = (message) => {\n    const urlRegex = /(https?:\\/\\/[^\\s]+)/g;\n    const url = message.message.match(urlRegex);\n    if (message.image) {\n      return (\n        <div\n          className={`message-container ${\n            message.username === username ? 'current-user' : 'other-user'\n          }`}\n        >\n          {message.username !== username && (\n            <Linkify className=\"linkify-link\">{message.message}</Linkify>\n          )}\n          <div className=\"message-content\">\n            <img\n              src={message.image}\n              alt=\"message content\"\n              className=\"message-image\"\n              onClick={() => setModalImage(message.image)}\n            />\n          </div>\n        </div>\n      );\n    } else if (url) {\n      return (\n        <div\n          className={`message-container ${\n            message.username === username ? 'current-user' : 'other-user'\n          }`}\n        >\n          {message.username !== username && (\n            <Linkify className=\"linkify-link\">\n              <span className=\"red-link\">{message.message}</span>\n            </Linkify>\n          )}\n          <div className=\"message-content\">\n            <Linkify>{message.message}</Linkify>\n            <ReactLinkPreview url={url[0]} />\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div\n          className={`message-container ${\n            message.username === username ? 'current-user' : 'other-user'\n          }`}\n        >\n          {message.username !== username && (\n            <span className=\"message-username\">{message.username}:</span>\n          )}\n          <div className=\"message-content\">\n            <Linkify className=\"red-link\">{message.message}</Linkify>\n          </div>\n        </div>\n      );\n    }\n  };\n\n  useEffect(() => {\n    const updateActiveUsers = () => {\n      const activeUsernames = userHistory\n        .filter((user) => user.status === 'connected')\n        .map((user) => user.username);\n      setActiveUsers(activeUsernames);\n    };\n\n    updateActiveUsers();\n  }, [userHistory]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleImageChange = (e) => {\n    let files = e.target.files;\n    if (files.length === 0) {\n      console.log('No file selected');\n      return;\n    }\n\n    let reader = new FileReader();\n    reader.onload = (e) => {\n      setSelectedImage(e.target.result);\n    };\n\n    reader.onerror = (error) => {\n      console.log('Error reading file:', error);\n    };\n\n    reader.readAsDataURL(files[0]);\n  };\n\n  const handleSendImage = () => {\n    if (selectedImage) {\n      const message = {\n        username,\n        message: '',\n        image: selectedImage,\n      };\n\n      socket.emit('chat message', message);\n      setSelectedImage(null);\n    }\n  };\n\n  return (\n    <Router>\n      <div className=\"app\">\n        {!chatStarted ? (\n          <div className=\"start-chat\">\n            <h1>Enter your username</h1>\n            <input\n              type=\"text\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              placeholder=\"Your username...\"\n            />\n            <button onClick={handleStartChat}>Start Chat</button>\n          </div>\n        ) : (\n          <div className=\"chat-container\">\n            <div className=\"sidebar\">\n              <h2>Active Users</h2>\n              {activeUsers.length > 0 ? (\n                <ul>\n                  {activeUsers.map((user) => (\n                    <li key={user}>{user}</li>\n                  ))}\n                </ul>\n              ) : (\n                <p>No active users</p>\n              )}\n            </div>\n            <div className=\"chat\">\n              <div className=\"message-list\" ref={messageListRef}>\n                {loadingMessages ? (\n<p>Loading messages...</p>\n                ) : messages.length > 0 ? (\n                  messages.map((message, index) => (\n                    <div key={index} className=\"message\">\n                      {handleMessage(message)}\n                    </div>\n                  ))\n                ) : (\n                  <p>No messages</p>\n                )}\n              </div>\n              <div className=\"input-container\">\n                <div className=\"username-container\">\n                  <span className=\"message-username\">{username}:</span>\n                </div>\n                <input\n                  type=\"text\"\n                  value={inputMessage}\n                  onChange={(e) => setInputMessage(e.target.value)}\n                  onKeyDown={handleKeyDown}\n                  placeholder=\"Type your message...\"\n                />\n              <div className=\"file-input-wrapper\">\n  <label htmlFor=\"file-input\" className=\"file-input-label\">\n    <FontAwesomeIcon icon={faUpload} className=\"upload-icon\" />\n  </label>\n  <input\n    type=\"file\"\n    accept=\".jpeg, .png, .jpg\"\n    id=\"file-input\"\n    className=\"file-input\"\n    onChange={(e) => handleImageChange(e)}\n  />\n  <button className=\"send-image-button\" onClick={handleSendImage}>\n    <i className=\"fas fa-image\"></i>\n  </button>\n</div>\n                <button onClick={handleSendMessage}>Send</button>\n              </div>\n            </div>\n            <div className=\"user-history\">\n              <h2>User History</h2>\n              {userHistory.length > 0 ? (\n                <ul>\n                  {userHistory.map((user, index) => (\n                    <li key={index}>\n                      {user.username} - {user.status}\n                    </li>\n                  ))}\n                </ul>\n              ) : (\n                <p>No user history</p>\n              )}\n            </div>\n          </div>\n        )}\n\n        {modalImage && (\n          <div\n            className=\"modal-background\"\n            onClick={() => setModalImage(null)}\n          >\n            <div className=\"modal-content\">\n              <img\n                src={modalImage}\n                alt=\"modal content\"\n                className=\"modal-image\"\n              />\n            </div>\n          </div>\n        )}\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n",{"ruleId":"17","severity":1,"message":"18","line":8,"column":10,"nodeType":"19","messageId":"20","endLine":8,"endColumn":17},{"ruleId":"17","severity":1,"message":"21","line":25,"column":10,"nodeType":"19","messageId":"20","endLine":25,"endColumn":24},{"ruleId":"17","severity":1,"message":"22","line":25,"column":26,"nodeType":"19","messageId":"20","endLine":25,"endColumn":43},"no-unused-vars","'faImage' is defined but never used.","Identifier","unusedVar","'selectingImage' is assigned a value but never used.","'setSelectingImage' is assigned a value but never used."]